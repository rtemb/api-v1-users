// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"gitlab.com/rtemb/api-v1-users/internal/middleware"
)

type AuthCheckerMock struct {
	CheckAccessStub        func(string) (bool, error)
	checkAccessMutex       sync.RWMutex
	checkAccessArgsForCall []struct {
		arg1 string
	}
	checkAccessReturns struct {
		result1 bool
		result2 error
	}
	checkAccessReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AuthCheckerMock) CheckAccess(arg1 string) (bool, error) {
	fake.checkAccessMutex.Lock()
	ret, specificReturn := fake.checkAccessReturnsOnCall[len(fake.checkAccessArgsForCall)]
	fake.checkAccessArgsForCall = append(fake.checkAccessArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("CheckAccess", []interface{}{arg1})
	fake.checkAccessMutex.Unlock()
	if fake.CheckAccessStub != nil {
		return fake.CheckAccessStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.checkAccessReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AuthCheckerMock) CheckAccessCallCount() int {
	fake.checkAccessMutex.RLock()
	defer fake.checkAccessMutex.RUnlock()
	return len(fake.checkAccessArgsForCall)
}

func (fake *AuthCheckerMock) CheckAccessCalls(stub func(string) (bool, error)) {
	fake.checkAccessMutex.Lock()
	defer fake.checkAccessMutex.Unlock()
	fake.CheckAccessStub = stub
}

func (fake *AuthCheckerMock) CheckAccessArgsForCall(i int) string {
	fake.checkAccessMutex.RLock()
	defer fake.checkAccessMutex.RUnlock()
	argsForCall := fake.checkAccessArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AuthCheckerMock) CheckAccessReturns(result1 bool, result2 error) {
	fake.checkAccessMutex.Lock()
	defer fake.checkAccessMutex.Unlock()
	fake.CheckAccessStub = nil
	fake.checkAccessReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *AuthCheckerMock) CheckAccessReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkAccessMutex.Lock()
	defer fake.checkAccessMutex.Unlock()
	fake.CheckAccessStub = nil
	if fake.checkAccessReturnsOnCall == nil {
		fake.checkAccessReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkAccessReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *AuthCheckerMock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkAccessMutex.RLock()
	defer fake.checkAccessMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AuthCheckerMock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ middleware.AuthChecker = new(AuthCheckerMock)
